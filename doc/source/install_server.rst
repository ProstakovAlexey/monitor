Cерверная часть
===============
.. |Сопоставление обработчиков| image:: _static/obr_1.jpg
.. |Кэширование| image:: _static/cache_1.jpg

Установка выполняется на том же сервере, где стоит IIS ТИ. Поэтому установка самого IIS не рассматривается, если она требуется, поищите инструкции в интернете.

.. _python_install:

Установка Python и библиотек
----------------------------
Программа написано и была проверена на python 3.5, но я думаю она будет работать под любым python3.

1. Установите python3 (https://www.python.org/downloads/). При установке обратите внимание, что надо ставить для всех пользователей и добавить python в path.
2. Установите дополнительную библиотеку для работы с БД MS SQL. Для этого откройте CMD с правами администратора и выполните:
   `pip install pypyodbc` 
   Компьютер должен быть подключен к интернету. Если не подключен, то на другом выполните:   
   `pip download pypyodbc` 
   он скачает пакет, далее перенесите пакет на сервер и выполните там: 
   `pip install полный_путь_к_pypyodbc`

Настройка IIS
-------------
1. Установить CGI для IIS, как написано тут - http://netdot.co/2015/03/09/flask-on-iis/
2. В папку IIS wwwroot добавить папку monitor, скопируйте туда файлы от серверной части - :ref:`Состав`.
3. В диспетчере службы IIS добавьте пул приложения, это в будущем даст возможность перезапускать только его или избежать конфликтов с другими приложениями. 

.. image:: _static/pull.jpg   
   :alt: Настройка пула приложения 
   :align: center

4. В диспетчера нажмите на папку правой кнопкой и выберите добавить приложение, после этого рядом с папкой появится значок интернета.
5. В диспетчере нажмите |Сопоставление обработчиков| и добавьте новый обработчик для файлов `.py`. Обратите внимание, что надо правильно задать путь для  python.  

.. image:: _static/obr.jpg   
   :alt: Настройка обработчика для файлов python 
   :align: center
   
Настройка кэширования для IIS
-----------------------------
Программа написана так, что в ответе веб-сервиса указывается время для кэширования: максимальное - 20 минут, минимальное - 10 мин. Но для правильное работы этой функции нужно выполнить настройки в **Диспетчере служб IIS**:

1. Зайдите в диспетчер, нажмите на сайт monitor.
2. Справа двойной щелчок на |Кэширование|.
3. Добавьте строку как на рис. ниже.

.. image:: _static/cache_2.jpg   
   :alt: Настройка кэширование для файлов python 
   :align: center

Настройка программы
-------------------
Чтобы монитор мог работать знать адрес БД ТИ и уметь к ней подключатся, это настраивается в файл **config.ini**. Файл снабжен комментариями, пожалуйста заполните его для своей системы.

Запуск тестов
-------------
После установки и настройки ПО нужно запустить тесты для проверки его работы. Набор тестов запускается на сервере, где установлен IIS.

1. Открой CMD и перейдите в каталог с установленным **tests.py**.
2. Запустить тестовое приложение: `python -m unittest tests.py`. В случае успешной работы напишет - ОК, иначе ошибки.

Возможные проблемы
------------------
1. Тест не запустился. Пишет, что python не является программой - надо добавить его в path.
2. Запустился, но ругается на отсутствие модуля pypyodbc - установите его, как написано выше.
3. Провалился тест подключения к БД - проверьте конфигурационный файл.
4. Провалились другие тесты - проверьте процесс установки, вероятно неправильно настроен IIS. Можете попробовать перейти в браузере по ссылке http://127.0.0.1/monitor/cgi.py/test и почитать, в чем причина.

.. _server_work:

Описание работы
---------------
Серверная часть представляет собой веб-сервис, работающий под управлением IIS. Взаимодействие с IIS выполняется используя CGI, взаимодействие с клиентом - REST сервис, ответ JSON структура. После развертывания веб-сервис ожидает запроса по адресу http://IP/monitor/cgi.py. При получении запроса происходит обращение в БД ТИ и извлекается протокол за последний час, так если запрос пришел в 9:54, то будет извлечен протокол с 8:54 до 9:54. Операция довольно трудоемкая, поэтому предусмотрены следующие особенности:
    - извлекаются сразу все записи протокола;
    - они анализируются на стороне ПО Monitor и извлекаются сразу все данные, которые может вернуть сервер;
    - в каждом ответе сервера содержатся сразу все данные, разбор их происходит на стороне клиента;
    - т.к. из-за особенностей работы Zabbix приходится спрашивать отдельно по каждому виду сведений, чтобы избежать многократного опроса БД, введено кэширование данные (силами IIS) - период кэширования 10 мин. Поэтому рекомендуется в течении этого периода послать все запросы. Далее будут примеры, где можно посмотреть как это работает.

Сервис рассчитан на  взаимодействие с клиентом (из состава ПО), но далее приведу примеры запросов, их можно использовать интеграции со сторонним ПО или дополнительной проверки работы. Запросы можно выполнять прямо из браузера, к запросам можно переходить только если выполнили установку и успешное тестирование. 

Тестовый запрос
***************
Он Всегда возвращает одинаковое значение, обращение к БД не происходит. Запрос::

    http://127.0.0.1/monitor/cgi.py/test

Ответ::

    {"errorCode": 0, "info": {"test": 20}, "errorMessage": "", "date": "18.01.2017 08:55:06"}

Запрос возвращающий данные
**************************
Возвращает данные, выполняет запрос к БД. Запрос::

    http://127.0.0.1/monitor/cgi.py

Ответ::

    {"errorCode": 0, "date": "18.01.2017 09:02:43", "errorMessage": "", "info": {"responseSmev": 0, "requestPGU": 549, "requestSmev": 273, "responsePGU": 26}}
    
Запрос с ошибкой
****************
Запрос на метод, который всегда возвращает ошибку. Может пригодится для отладки ПО, тестирования. Обращение к БД не происходит. Запрос::

    http://127.0.0.1/monitor/cgi.py/error

Ответ::

    {"errorMessage": "Это тестовое сообщение об ошибке", "date": "18.01.2017 08:58:10", "errorCode": 42}

Запрос с неверным указанием параметров
**************************************
Если неправильно указать параметры запроса, то это будет обработано. Обращение к БД не происходит. Запрос::

    http://127.0.0.1/monitor/cgi.py/foo

Ответ::

    {"errorMessage": "Монитор вызван с недокументированным методом", "errorCode": 2, "date": "18.01.2017 09:00:05"}



